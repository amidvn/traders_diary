
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальноеЗаполнение(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СпособЗагрузкиБрокерскогоОтчетаПриИзменении("");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru = 'Электронная таблица Excel'") + " (*.xls, *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбора.Заголовок                   = НСтр("ru = 'Выберите файл Excel (*.xls, *.xlsx)'");
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xls;xlsx";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогВыбора", ДиалогВыбора)));
	
КонецПроцедуры

&НаКлиенте
Процедура БрокерскийСчетПриИзменении(Элемент)
	СпособЗагрузкиБрокерскогоОтчета = БрокерскийСчетПриИзмененииНаСервере(БрокерскийСчет);
	СпособЗагрузкиБрокерскогоОтчетаПриИзменении("");
КонецПроцедуры

&НаКлиенте
Процедура СпособЗагрузкиБрокерскогоОтчетаПриИзменении(Элемент)
	
	ЗагрузкаЧерезExcel = Ложь;
	Если СпособЗагрузкиБрокерскогоОтчета = ПредопределенноеЗначение("Перечисление.СпособыЗагрузкиБрокерскогоОтчета.ТинькоффPantini") Тогда
		ИмяЛиста = "broker_rep";
		ЗагрузкаЧерезExcel = Истина;
	ИначеЕсли СпособЗагрузкиБрокерскогоОтчета = ПредопределенноеЗначение("Перечисление.СпособыЗагрузкиБрокерскогоОтчета.ВТБExcel") Тогда 			
		ЗагрузкаЧерезExcel = Истина;
	КонецЕсли;
	
	Элементы.ГруппаФайлЕксель.Видимость = ЗагрузкаЧерезExcel;
	Элементы.ГруппаПериодЗагрузки.Видимость = СпособЗагрузкиБрокерскогоОтчета = ПредопределенноеЗначение("Перечисление.СпособыЗагрузкиБрокерскогоОтчета.ТинькоффOpenAPI");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмяТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(СпособЗагрузкиБрокерскогоОтчета) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите вид брокерского отчета";
	    Сообщение.Поле = "СпособЗагрузкиБрокерскогоОтчета";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(БрокерскийСчет) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите брокерский счет";
	    Сообщение.Поле = "БрокерскийСчет";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Элементы.ГруппаФайлЕксель.Видимость И Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите путь к файлу";
	    Сообщение.Поле = "ПутьКФайлу";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Элементы.ГруппаПериодЗагрузки.Видимость Тогда
		Если Не ЗначениеЗаполнено(ПериодЗагрузки.ДатаНачала) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указана дата начала периода загрузки";
		    Сообщение.Поле = "ПериодЗагрузки";
		    Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПериодЗагрузки.ДатаОкончания) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указана дата окончания периода загрузки";
		    Сообщение.Поле = "ПериодЗагрузки";
		    Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНаСервере();
	
	ПоказатьПредупреждение(, "Загрузка из файла завершена", 15);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТокенOpenApiТинькофф(Команда)
	ИмяФормыДляВводаТокена = "Обработка.ЗагрузкаБрокерскогоОтчета.Форма.ВводТокенаOpenApiТинькофф";
	ОткрытьФорму(ИмяФормыДляВводаТокена,,ЭтаФорма,ЭтаФорма,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачальноеЗаполнение()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БрокерскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БрокерскиеСчета КАК БрокерскиеСчета
	|ГДЕ
	|	НЕ БрокерскиеСчета.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		БрокерскийСчет = Выборка.Ссылка;
		СпособЗагрузкиБрокерскогоОтчета = БрокерскийСчет.СпособЗагрузкиБрокерскогоОтчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		РасширениеФайла = Сред(ПутьКФайлу, СтрНайти(ПутьКФайлу, ".", НаправлениеПоиска.СКонца)+1);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	ЛогЗагрузки = "";
	
	КоличествоСтрок = 0;
	
	Если Элементы.ГруппаФайлЕксель.Видимость Тогда
		ТабЗнач = ЗагрузитьМетодом_MSADODB(ПутьКФайлу, "", , , , КоличествоСтрок, "MicrosoftACEOLEDB12");
	КонецЕсли;
	
	Если СпособЗагрузкиБрокерскогоОтчета = Перечисления.СпособыЗагрузкиБрокерскогоОтчета.ТинькоффPantini Тогда
		ОбработатьТинькоффPantini(ТабЗнач);
	ИначеЕсли СпособЗагрузкиБрокерскогоОтчета = Перечисления.СпособыЗагрузкиБрокерскогоОтчета.ТинькоффOpenAPI Тогда
		ОбработатьТинькоффOpenAPI();
	КонецЕсли;
	
КонецПроцедуры

// Метод "Microsoft ADODB"/
//
// Параметры:
//  ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//  ИмяЛиста - Имя выбранного листа файла EXCEL.
//  СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//            Не используется, т.к. в СтрокеСоединения указано HDR=YES, а не HDR=NO.
//       В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//  НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//  КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//  КолвоСтрокExcel - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//  ПодключениеADODB - тип драйвера ADODB для подключения к EXCEL.
//
// Возвращаемые значения:
//  ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
&НаСервере
Функция ЗагрузитьМетодом_MSADODB(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, 
 Знач ПодключениеADODB = "MicrosoftJetOLEDB40") Экспорт
    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
    
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
    Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // определение имени первого листа
	SchemaTables = 20;
	RecordsetTables = ADODBConnection.OpenSchema(SchemaTables);
			
	Пока НЕ RecordsetTables.Eof() Цикл
		ИмяЛиста = RecordsetTables.Fields("TABLE_NAME").Value;
		Если Прав(ИмяЛиста, 1) = "$" Тогда
			ИмяЛиста = Лев(ИмяЛиста, СтрДлина(ИмяЛиста)-1);
		КонецЕсли;	
		Прервать;
	КонецЦикла;	
	
	Если Не ЗначениеЗаполнено(ИмяЛиста) Тогда
		Сообщить(НСтр("ru = 'В файле Excel нет листов, загрузка данных невозможна'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;
	КонецЕсли;		
    
    ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
    
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
    Попытка
        ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
        
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
            
            Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 2 Тогда
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
    КонецЦикла;
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//НоваяСтрока = ТаблицаРезультат.Добавить();
	//НоваяСтрока.НомерСтроки = 1;
	//Для ит = 1 ПО КолвоКолонокExcel Цикл
	//    
	//    ИмяКолонки = "К_" + ит;
	//    Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//    НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
	//    
	//КонецЦикла;
    
    // ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    НомерСтроки = 1;
    Пока ADODBRecordset.EOF() = 0 Цикл
        
        НомерСтроки = НомерСтроки + 1;
        
        Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            ADODBRecordset.MoveNext();             // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаРезультат.Добавить();
        НоваяСтрока.НомерСтроки = НомерСтроки;
        
        Для ит = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(ит - 1);
                
            Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value;        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
            
            ИмяКолонки = "К_" + ит;
            НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
            
            // Используется при формировании таблицы на форме обработки.
            ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
            ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
            ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
        КонецЦикла;
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    ADODBRecordset.Close();
    ADODBConnection.Close();
    ADODBRecordset   = Неопределено;
    ADODBConnection = Неопределено;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

&НаСервере
Процедура ОбработатьТинькоффPantini(ТабЗнач)
	
	ТаблицаСделок = ПолучитьТаблицуСделок();
	ТаблицаИзмененийОстатков = ПолучитьТаблицуИзмененийОстатковДенежныхСредств();
	
	СоответствиеКолонок = Новый Соответствие;
	Для Каждого Колонка Из ТабЗнач.Колонки Цикл
		СоответствиеКолонок.Вставить(Колонка.Заголовок, Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Стр Из ТабЗнач Цикл
		
		Если Не ВРег(Стр[СоответствиеКолонок.Получить("status")]) = "DONE" Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСделки = Перечисления.ТипыСделок.ПустаяСсылка();
		ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ПустаяСсылка();
		ПричинаИзмененияОбратная = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ПустаяСсылка();
		
		Если Стр[СоответствиеКолонок.Получить("operationType")] = "Sell" Тогда
			ТипСделки = Перечисления.ТипыСделок.Продажа;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "Buy" Тогда
			ТипСделки = Перечисления.ТипыСделок.Покупка;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "BuyWithCard" Тогда
			ТипСделки = Перечисления.ТипыСделок.Покупка;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "PayIn" Тогда
			ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ПополнениеБрокерскогоСчета;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "PayOut" Тогда
			ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ВыводСБрокерскогоСчета;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "Repayment" Тогда
			ТипСделки = Перечисления.ТипыСделок.Продажа;
			ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ПогашениеОблигации;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "TaxCpn" Тогда
			ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.УдержаниеНалога;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "Coupon" Тогда
			ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ВыплатаКупонов;
		КонецЕсли;
		
		Валюта = ОпределитьВалюту(Стр[СоответствиеКолонок.Получить("currency")]);
		
		СуммаСделки = Стр[СоответствиеКолонок.Получить("payment")];
		Если СуммаСделки < 0 Тогда
			СуммаСделки = -СуммаСделки;
		КонецЕсли;
			
		ДатаВремяСделки = ОпределитьДатуВремяСделки(Стр[СоответствиеКолонок.Получить("date")]);
		ТипИнструмента = ПолучитьТипИнструмента(Стр[СоответствиеКолонок.Получить("instrumentType")]);
		Тикер = Стр[СоответствиеКолонок.Получить("ticker")];
		Название = Стр[СоответствиеКолонок.Получить("showName")];
		ОписаниеОперации = Стр[СоответствиеКолонок.Получить("description")];
		
		Если ТипИнструмента = Перечисления.ТипыИнструментов.Валюта Тогда
			ВалютаПоСделке = Справочники.Валюты.ПустаяСсылка();
			Если Тикер = "USDRUB" Тогда
				ВалютаПоСделке = ОпределитьВалюту("USD");
			ИначеЕсли Тикер = "EURRUB" Тогда	 
				ВалютаПоСделке = ОпределитьВалюту("EUR");
			КонецЕсли;	
			Если ТипСделки = Перечисления.ТипыСделок.Покупка Тогда
				ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ОбменВалютыСписание;
				ПричинаИзмененияОбратная = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ОбменВалютыПоступление;
			ИначеЕсли ТипСделки = Перечисления.ТипыСделок.Продажа Тогда
				ПричинаИзменения = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ОбменВалютыПоступление;
				ПричинаИзмененияОбратная = Перечисления.ПричиныИзмененияОстатковДенежныхСредств.ОбменВалютыСписание;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТипСделки) Тогда
		
			СуммаКомиссии = Стр[СоответствиеКолонок.Получить("commission")];
			Если ТипЗнч(СуммаКомиссии) <> Тип("Число") Тогда
				СуммаКомиссии = 0;
			КонецЕсли;
			СуммаКомиссии = -СуммаКомиссии;
			
			КодЦеннойБумаги = Стр[СоответствиеКолонок.Получить("isin")];
			
			НовСтр = ТаблицаСделок.Добавить();
			НовСтр.ИдентификаторСделки = Формат(Стр[СоответствиеКолонок.Получить("id")], "ЧГ=0");
			НовСтр.ДатаДень = НачалоДня(ДатаВремяСделки - 2*60*60); // сделки до двух часов ночи относятся к сессии предыдущего дня
			НовСтр.ДатаВремяСделки = ДатаВремяСделки;
			НовСтр.ЦеннаяБумага = ОпределитьЦеннуюБумагу(Тикер, Название, КодЦеннойБумаги, ТипИнструмента, Валюта);
			НовСтр.Валюта = Валюта;
			НовСтр.ТипСделки = ТипСделки;
			НовСтр.Количество = Стр[СоответствиеКолонок.Получить("quantity")];
			НовСтр.Цена = Стр[СоответствиеКолонок.Получить("price")];
			НовСтр.Сумма = СуммаСделки;
			НовСтр.Комиссия = СуммаКомиссии;
			НовСтр.Описание = ОписаниеОперации;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПричинаИзменения) Тогда
			
			НовСтр = ТаблицаИзмененийОстатков.Добавить();
			НовСтр.ИдентификаторСделки = Формат(Стр[СоответствиеКолонок.Получить("id")], "ЧГ=0");
			НовСтр.ДатаДень = НачалоДня(ДатаВремяСделки - 2*60*60);
			НовСтр.ДатаВремяСделки = ДатаВремяСделки;
			НовСтр.Валюта = Валюта;
			НовСтр.ПричинаИзменения = ПричинаИзменения;
			НовСтр.Сумма = СуммаСделки;
			НовСтр.Описание = ОписаниеОперации;
			
			Если ТипИнструмента = Перечисления.ТипыИнструментов.Валюта Тогда
				НовСтр = ТаблицаИзмененийОстатков.Добавить();
				НовСтр.ИдентификаторСделки = Формат(Стр[СоответствиеКолонок.Получить("id")], "ЧГ=0");
				НовСтр.ДатаДень = НачалоДня(ДатаВремяСделки - 2*60*60);
				НовСтр.ДатаВремяСделки = ДатаВремяСделки;
				НовСтр.Валюта = ВалютаПоСделке;
				НовСтр.ПричинаИзменения = ПричинаИзмененияОбратная;
				НовСтр.Сумма = Стр[СоответствиеКолонок.Получить("quantity")];
				НовСтр.Описание = ОписаниеОперации;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТаблицаСделок.Сортировать("ДатаВремяСделки");
	СоздатьОбновитьДокументыСделкиЗаДень(ТаблицаСделок);
	ТаблицаИзмененийОстатков.Сортировать("ДатаВремяСделки");
	СоздатьОбновитьДокументыДвижениеДенежныхСредствЗаДень(ТаблицаИзмененийОстатков);
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьТинькоффOpenAPI()
	
	URL = "https://api-invest.tinkoff.ru/openapi/operations";
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("from", Формат(ПериодЗагрузки.ДатаНачала, "ДФ='yyyy-MM-ddTHH:mm:ss''+03:00';"));
	ПараметрыЗапроса.Вставить("to", Формат(ПериодЗагрузки.ДатаОкончания, "ДФ='yyyy-MM-ddTHH:mm:ss''+03:00';"));
	
	ДополнительныеПараметры = ИнициироватьЗаголовки();
	
	Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, ДополнительныеПараметры);
	ДанныеОтвета = ПолучитьДанныеИзОтвета(Ответ);
	
	Операции = ДанныеОтвета.payload.operations;
	
	ТаблЗнач = Новый ТаблицаЗначений;
	ТаблЗнач.Колонки.Добавить("operationType", , "operationType");	
	ТаблЗнач.Колонки.Добавить("date", , "date");	
	ТаблЗнач.Колонки.Добавить("isMarginCall", , "isMarginCall");	
	ТаблЗнач.Колонки.Добавить("instrumentType", , "instrumentType");	
	ТаблЗнач.Колонки.Добавить("figi", , "figi");	
	ТаблЗнач.Колонки.Добавить("quantity", , "quantity");	
	ТаблЗнач.Колонки.Добавить("quantityExecuted", , "quantityExecuted");	
	ТаблЗнач.Колонки.Добавить("price", , "price");	
	ТаблЗнач.Колонки.Добавить("payment", , "payment");	
	ТаблЗнач.Колонки.Добавить("currency", , "currency");	
	ТаблЗнач.Колонки.Добавить("commission", , "commission");	
	ТаблЗнач.Колонки.Добавить("trades", , "trades");	
	ТаблЗнач.Колонки.Добавить("status", , "status");	
	ТаблЗнач.Колонки.Добавить("id", , "id");	
	ТаблЗнач.Колонки.Добавить("issuer", , "issuer");	
	ТаблЗнач.Колонки.Добавить("ticker", , "ticker");	
	ТаблЗнач.Колонки.Добавить("isin", , "isin");	
	ТаблЗнач.Колонки.Добавить("showName", , "showName");	
	ТаблЗнач.Колонки.Добавить("description", , "description");	
	
	СоответствиеГлобальныхИдентификаторов = ПолучитьИнформациюПоБумагам();
	
	Для Каждого ОперацияСтруктура Из Операции Цикл
		НовСтр = ТаблЗнач.Добавить();
		Для Каждого ЭлементСтруктуры Из ОперацияСтруктура Цикл
			НовСтр[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;
		commission = НовСтр.commission;
		Если commission <> Неопределено Тогда
			НовСтр.commission = commission.value;
		Иначе
			НовСтр.commission = 0;	
		КонецЕсли;		
		Если ЗначениеЗаполнено(НовСтр.figi) Тогда
			НайдСоответствие = СоответствиеГлобальныхИдентификаторов[НовСтр.figi];
			ЗаполнитьЗначенияСвойств(НовСтр, НайдСоответствие);
		КонецЕсли;	
	КонецЦикла;
	
	ОбработатьТинькоффPantini(ТаблЗнач);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИнформациюПоБумагам()

	СоответствиеГлобальныхИдентификаторов = Новый Соответствие;
	
	ВидыАктивов = Новый Массив;
	ВидыАктивов.Добавить("stocks");
	ВидыАктивов.Добавить("etfs");
	ВидыАктивов.Добавить("bonds");
	ВидыАктивов.Добавить("currencies");

	Для Каждого ВидАктива Из ВидыАктивов Цикл
		
		URL = "https://api-invest.tinkoff.ru/openapi/market/" + ВидАктива;
		ДополнительныеПараметры = ИнициироватьЗаголовки();
		Ответ = КоннекторHTTP.Get(URL, , ДополнительныеПараметры);
		ДанныеИзОтвета = ПолучитьДанныеИзОтвета(Ответ);
		
		Если ТипЗнч(ДанныеИзОтвета) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;			
		
		Для каждого ТекДанные Из ДанныеИзОтвета.payload.instruments Цикл
	
			СтруктураПоАктиву = Новый Структура("issuer, ticker, isin, showName");
			Если ТекДанные.Свойство("isin") Тогда
				СтруктураПоАктиву.isin = ТекДанные.isin;
			Иначе
				СтруктураПоАктиву.isin = ТекДанные.ticker;
			КонецЕсли;			
			СтруктураПоАктиву.ticker = ТекДанные.ticker;		
			Если ВидАктива = "currencies" Тогда
				Если Лев(ТекДанные.ticker, 3) = "USD" Тогда
					СтруктураПоАктиву.ticker = "USDRUB";
				ИначеЕсли Лев(ТекДанные.ticker, 3) = "EUR" Тогда
					СтруктураПоАктиву.ticker = "EURRUB";
				КонецЕсли;	
			КонецЕсли;	
			СтруктураПоАктиву.issuer = ТекДанные.name;		
			СтруктураПоАктиву.showName = ТекДанные.name;		
		
			СоответствиеГлобальныхИдентификаторов.Вставить(ТекДанные.figi, СтруктураПоАктиву);
		
		КонецЦикла;
		 	
	КонецЦикла;
	
	Возврат СоответствиеГлобальныхИдентификаторов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеИзОтвета(Ответ)
	
	РезультатJson = Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		ПараметрыПреобразованияJSON = Новый Структура;
		ПараметрыПреобразованияJSON.Вставить("ПрочитатьВСоответствие", Ложь);
		
		РезультатJson = КоннекторHTTP.КакJson(Ответ, ПараметрыПреобразованияJSON);
		
		Если ТипЗнч(РезультатJson) = Тип("Структура") Тогда
			
			ТекстОшибки = "";
			
			Если  РезультатJson.Свойство("error") и РезультатJson.error <> 0 Тогда
				
				ТекстОшибки = ТекстОшибки + "("+ РезультатJson.error + ")";					
				Если  РезультатJson.Свойство("errors") Тогда
					
					ТекстОшибки = ТекстОшибки + "  "+ РезультатJson.errors;					
					
				КонецЕсли;				
				
			КонецЕсли;    			
			
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
				ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось загрузить содержимое (%1). Ошибка: %2'"), 
					Ответ.URL, ТекстОшибки);	
			
			КонецЕсли;			
			
		ИначеЕсли ТипЗнч(РезультатJson) = Тип("Соответствие") Тогда
			
			Если РезультатJson.Получить("error") <> Неопределено Тогда
			
				ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось загрузить содержимое (%1). В ответе ошибка ""%2"".'"),
					Ответ.URL, РезультатJson.Получить("error"));		

			КонецЕсли;
	
		КонецЕсли;		

	Иначе

		ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось загрузить содержимое (%1). Код состояния %2. Ошибка ""%3"".'"),
			Ответ.URL, Ответ.КодСостояния, КоннекторHTTP.КакТекст(Ответ, "UTF-8"));
		
	КонецЕсли;

	Возврат РезультатJson;

КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСделок()
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить("ДатаДень");
	ТаблицаСделок.Колонки.Добавить("ИдентификаторСделки");
	ТаблицаСделок.Колонки.Добавить("ДатаВремяСделки");
	ТаблицаСделок.Колонки.Добавить("ЦеннаяБумага");
	ТаблицаСделок.Колонки.Добавить("Валюта");
	ТаблицаСделок.Колонки.Добавить("ТипСделки");
	ТаблицаСделок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаСделок.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	ТаблицаСделок.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаСделок.Колонки.Добавить("Комиссия");
	ТаблицаСделок.Колонки.Добавить("Описание");
	
	Возврат ТаблицаСделок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуИзмененийОстатковДенежныхСредств()
	
	ТаблицаИзмененийОстатков = Новый ТаблицаЗначений;
	ТаблицаИзмененийОстатков.Колонки.Добавить("ДатаДень");
	ТаблицаИзмененийОстатков.Колонки.Добавить("ИдентификаторСделки");
	ТаблицаИзмененийОстатков.Колонки.Добавить("ДатаВремяСделки");
	ТаблицаИзмененийОстатков.Колонки.Добавить("Валюта");
	ТаблицаИзмененийОстатков.Колонки.Добавить("ПричинаИзменения");
	ТаблицаИзмененийОстатков.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаИзмененийОстатков.Колонки.Добавить("Описание");
	
	Возврат ТаблицаИзмененийОстатков;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьДатуВремяСделки(СтрокаДатаВремя)
	
	// образец строки СтрокаДатаВремя - "2021-01-08T21:06:06.728+03:00"
	Год = Лев(СтрокаДатаВремя, 4);
	Месяц = Сред(СтрокаДатаВремя, 6, 2);
	День = Сред(СтрокаДатаВремя, 9, 2);
	Часы = Сред(СтрокаДатаВремя, 12, 2);
	Минуты = Сред(СтрокаДатаВремя, 15, 2);
	Секунды = Сред(СтрокаДатаВремя, 18, 2);
	ДатаВремяСделки = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
	Возврат ДатаВремяСделки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВалюту(СтрокаВалюта)
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(СтрокаВалюта));
	Если Валюта.Пустая() Тогда
		НоваяВалюта = Справочники.Валюты.СоздатьЭлемент();
		НоваяВалюта.Наименование = СтрокаВалюта;
		НоваяВалюта.Записать();
		Валюта = НоваяВалюта.Ссылка;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипИнструмента(СтрокаТипИнструмента)
	
	ТипИнструмента = Перечисления.ТипыИнструментов.ПустаяСсылка();
	
	Если СтрокаТипИнструмента = "Stock" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Акция;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "ETF" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.ETF;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "Bond" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Облигация;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "FX" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Валюта;
	КонецЕсли;	
	
	Возврат ТипИнструмента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьЦеннуюБумагу(Тикер, Название, КодЦеннойБумаги, ТипИнструмента, Валюта)
	
	ЦеннаяБумага = Справочники.ЦенныеБумаги.НайтиПоНаименованию(СокрЛП(Тикер), Истина);
	Если ЦеннаяБумага.Пустая() Тогда
		НоваяЦеннаяБумага = Справочники.ЦенныеБумаги.СоздатьЭлемент();
		НоваяЦеннаяБумага.Наименование = Тикер;
		НоваяЦеннаяБумага.ПолноеНаименование = Название;
		НоваяЦеннаяБумага.КодЦеннойБумаги = КодЦеннойБумаги;
		НоваяЦеннаяБумага.ТипИнструмента = ТипИнструмента;
		НоваяЦеннаяБумага.ОсновнаяВалюта = Валюта;
		НоваяЦеннаяБумага.Записать();
		ЦеннаяБумага = НоваяЦеннаяБумага.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(КодЦеннойБумаги) И Не ЗначениеЗаполнено(ЦеннаяБумага.КодЦеннойБумаги) Тогда
		СпрОбъект = ЦеннаяБумага.ПолучитьОбъект();
		СпрОбъект.КодЦеннойБумаги = КодЦеннойБумаги;
		СпрОбъект.Записать();
	КонецЕсли;
	
	Возврат ЦеннаяБумага;
	
КонецФункции

&НаСервере
Функция СоздатьОбновитьДокументыСделкиЗаДень(ТаблицаСделок)
	
	ДниСделок = ТаблицаСделок.Скопировать();
	ДниСделок.Свернуть("ДатаДень");
	
	Для Каждого СтрДень Из ДниСделок Цикл
		
		НайденныйДокумент = НайтиДокументСделкиЗаДень(СтрДень.ДатаДень, БрокерскийСчет);
		Если НайденныйДокумент.Пустая() Тогда
			НовыйДокумент = Документы.СделкиЗаДень.СоздатьДокумент();
			НовыйДокумент.Дата = СтрДень.ДатаДень;
			НовыйДокумент.БрокерскийСчет = БрокерскийСчет;
			НовыйДокумент.Записать();
			НайденныйДокумент = НовыйДокумент.Ссылка;
			ЛогЗагрузки = ЛогЗагрузки + "Создан документ ""Сделки за день"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		Иначе
			ЛогЗагрузки = ЛогЗагрузки + "Обновлен документ ""Сделки за день"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		
		СделкиЗаДень = ТаблицаСделок.Скопировать(Новый Структура("ДатаДень", СтрДень.ДатаДень));
		
		ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
		ДокОбъект.Сделки.Загрузить(СделкиЗаДень);
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ПодготовитьВнутридневныеСделки(СделкиЗаДень, СтрДень.ДатаДень, БрокерскийСчет);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЛогЗагрузки) Тогда
		Элементы.ЛогЗагрузки.Видимость = Истина;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиДокументСделкиЗаДень(ДатаДень, БрокерскийСчет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СделкиЗаДень.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СделкиЗаДень КАК СделкиЗаДень
	|ГДЕ
	|	НЕ СделкиЗаДень.ПометкаУдаления
	|	И СделкиЗаДень.БрокерскийСчет = &БрокерскийСчет
	|	И СделкиЗаДень.Дата МЕЖДУ &ДатаНачалаДня И &ДатаКонцаДня");
	
	Запрос.УстановитьПараметр("БрокерскийСчет", БрокерскийСчет);
	Запрос.УстановитьПараметр("ДатаНачалаДня", НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаКонцаДня", КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СделкиЗаДень.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументВнутридневныеСделки(ДатаДень, БрокерскийСчет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнутридневныеДанныеБрокерскогоОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВнутридневныеДанныеБрокерскогоОтчета КАК ВнутридневныеДанныеБрокерскогоОтчета
	|ГДЕ
	|	НЕ ВнутридневныеДанныеБрокерскогоОтчета.ПометкаУдаления
	|	И ВнутридневныеДанныеБрокерскогоОтчета.БрокерскийСчет = &БрокерскийСчет
	|	И ВнутридневныеДанныеБрокерскогоОтчета.Дата МЕЖДУ &ДатаНачалаДня И &ДатаКонцаДня");
	
	Запрос.УстановитьПараметр("БрокерскийСчет", БрокерскийСчет);
	Запрос.УстановитьПараметр("ДатаНачалаДня", НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаКонцаДня", КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СделкиЗаДень.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументДвижениеДенежныхСредствЗаДень(ДатаДень, БрокерскийСчет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДвижениеДенежныхСредств КАК ДвижениеДенежныхСредств
	|ГДЕ
	|	НЕ ДвижениеДенежныхСредств.ПометкаУдаления
	|	И ДвижениеДенежныхСредств.БрокерскийСчет = &БрокерскийСчет
	|	И ДвижениеДенежныхСредств.Дата МЕЖДУ &ДатаНачалаДня И &ДатаКонцаДня");
	
	Запрос.УстановитьПараметр("БрокерскийСчет", БрокерскийСчет);
	Запрос.УстановитьПараметр("ДатаНачалаДня", НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаКонцаДня", КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.ДвижениеДенежныхСредств.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодготовитьВнутридневныеСделки(СделкиЗаДень, ДатаДень, БрокерскийСчет)
	
	НайденныйДокумент = НайтиДокументВнутридневныеСделки(ДатаДень, БрокерскийСчет);
	ИмеющиесяСтроки = Неопределено;
	Если Не НайденныйДокумент.Пустая() Тогда
		ИмеющиесяСтроки = НайденныйДокумент.ДневныеДанные.Выгрузить();
	КонецЕсли;	
	
	ТаблицаВнутридневныхСделок = Новый ТаблицаЗначений;
	ТаблицаВнутридневныхСделок.Колонки.Добавить("ЦеннаяБумага");
	ТаблицаВнутридневныхСделок.Колонки.Добавить("Валюта");
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаПокупки", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаПродажи", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаКомиссий", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("ФинансовыйРезультат", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("Комментарий");
	
	ТекущиеСделки = ТаблицаВнутридневныхСделок.Скопировать();
	ТекущиеСделки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Стр Из СделкиЗаДень Цикл
		
		СтруктураПоиска = Новый Структура("ЦеннаяБумага, Валюта", Стр.ЦеннаяБумага, Стр.Валюта);
		МассивНайдСтрок = ТекущиеСделки.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			НайдСтрока = ТекущиеСделки.Добавить();
			НайдСтрока.ЦеннаяБумага = Стр.ЦеннаяБумага;
			НайдСтрока.Валюта = Стр.Валюта;
			НайдСтрока.Количество = 0;
		Иначе
			НайдСтрока = МассивНайдСтрок[0];
		КонецЕсли;	
		Если Стр.ТипСделки = Перечисления.ТипыСделок.Покупка Тогда
			НайдСтрока.Количество = НайдСтрока.Количество + Стр.Количество;
			НайдСтрока.СуммаПокупки = НайдСтрока.СуммаПокупки + Стр.Сумма;
		ИначеЕсли Стр.ТипСделки = Перечисления.ТипыСделок.Продажа Тогда
			НайдСтрока.Количество = НайдСтрока.Количество - Стр.Количество;
			НайдСтрока.СуммаПродажи = НайдСтрока.СуммаПродажи + Стр.Сумма;	
		КонецЕсли;
		НайдСтрока.СуммаКомиссий = НайдСтрока.СуммаКомиссий + Стр.Комиссия;
		
		Если НайдСтрока.Количество = 0 Тогда
			
			НовСтрока = ТаблицаВнутридневныхСделок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, НайдСтрока);
			НовСтрока.ФинансовыйРезультат = НовСтрока.СуммаПродажи - НовСтрока.СуммаПокупки - НовСтрока.СуммаКомиссий;
			
			СтруктураПоиска = Новый Структура("ЦеннаяБумага, Валюта, СуммаПокупки, СуммаПродажи");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, НовСтрока);
			Если ИмеющиесяСтроки <> Неопределено Тогда
				МассивИмеющихсяСтрок = ИмеющиесяСтроки.НайтиСтроки(СтруктураПоиска);
				Если МассивИмеющихсяСтрок.Количество() > 0 Тогда
					НовСтрока.Комментарий = МассивИмеющихсяСтрок[0].Комментарий;
				КонецЕсли;
			КонецЕсли;	
			
			ТекущиеСделки.Удалить(НайдСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ТаблицаВнутридневныхСделок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныйДокумент.Пустая() Тогда
		НовыйДокумент = Документы.ВнутридневныеДанныеБрокерскогоОтчета.СоздатьДокумент();
		НовыйДокумент.Дата = ДатаДень;
		НовыйДокумент.БрокерскийСчет = БрокерскийСчет;
		НовыйДокумент.Записать();
		НайденныйДокумент = НовыйДокумент.Ссылка;
	КонецЕсли;	
	
	ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
	ДокОбъект.ДневныеДанные.Загрузить(ТаблицаВнутридневныхСделок);
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбновитьДокументыДвижениеДенежныхСредствЗаДень(ТаблицаИзмененийОстатков)
	
	ДниСделок = ТаблицаИзмененийОстатков.Скопировать();
	ДниСделок.Свернуть("ДатаДень");
	
	Для Каждого СтрДень Из ДниСделок Цикл
		
		НайденныйДокумент = НайтиДокументДвижениеДенежныхСредствЗаДень(СтрДень.ДатаДень, БрокерскийСчет);
		Если НайденныйДокумент.Пустая() Тогда
			НовыйДокумент = Документы.ДвижениеДенежныхСредств.СоздатьДокумент();
			НовыйДокумент.Дата = СтрДень.ДатаДень;
			НовыйДокумент.БрокерскийСчет = БрокерскийСчет;
			НовыйДокумент.Записать();
			НайденныйДокумент = НовыйДокумент.Ссылка;
			ЛогЗагрузки = ЛогЗагрузки + "Создан документ ""Движение денежных средств"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		Иначе
			ЛогЗагрузки = ЛогЗагрузки + "Обновлен документ ""Движение денежных средств"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		
		СтрокиЗаДень = ТаблицаИзмененийОстатков.Скопировать(Новый Структура("ДатаДень", СтрДень.ДатаДень));
		
		ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
		ДокОбъект.ИзмененияОстатковДенежныхСредств.Загрузить(СтрокиЗаДень);
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЛогЗагрузки) Тогда
		Элементы.ЛогЗагрузки.Видимость = Истина;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция БрокерскийСчетПриИзмененииНаСервере(БрокерскийСчет)
	Возврат БрокерскийСчет.СпособЗагрузкиБрокерскогоОтчета;
КонецФункции

&НаСервереБезКонтекста
Функция ИнициироватьЗаголовки()
	
	ДополнительныеПараметры = Новый Структура;

	ТокенOpenApiТинькофф = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ТокенOpenAPIТинькофф", "Токен");
	Если Не ЗначениеЗаполнено(ТокенOpenApiТинькофф) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не указан токен OpenAPI Тинькофф";
		Сообщение.Сообщить();
	Иначе	
		ДополнительныеПараметры.Вставить("Заголовки", Новый Структура("Authorization", "Bearer " + ТокенOpenApiТинькофф));
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти