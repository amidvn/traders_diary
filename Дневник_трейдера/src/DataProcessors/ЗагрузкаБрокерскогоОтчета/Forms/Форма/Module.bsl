
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальноеЗаполнение(); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru = 'Электронная таблица Excel'") + " (*.xls, *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбора.Заголовок                   = НСтр("ru = 'Выберите файл Excel (*.xls, *.xlsx)'");
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xls;xlsx";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	ДиалогВыбора.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогВыбора", ДиалогВыбора)));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИмяТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ВидБрокерскогоОтчета) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите вид брокерского отчета";
	    Сообщение.Поле = "ВидБрокерскогоОтчета";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВидБрокерскогоОтчета) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите брокерский счет";
	    Сообщение.Поле = "БрокерскийСчет";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВидБрокерскогоОтчета) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Укажите путь к файлу";
	    Сообщение.Поле = "ПутьКФайлу";
	    Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНаСервере();
	
	ПоказатьПредупреждение(, "Загрузка из файла завершена", 15);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачальноеЗаполнение()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	БрокерскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БрокерскиеСчета КАК БрокерскиеСчета
	|ГДЕ
	|	НЕ БрокерскиеСчета.ПометкаУдаления");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		БрокерскийСчет = Выборка.Ссылка;
	КонецЕсли;
	
	ПеречислениеВидыБрокерскихОтчетов = Метаданные.Перечисления.ВидыБрокерскогоОтчета.ЗначенияПеречисления;
	Если ПеречислениеВидыБрокерскихОтчетов.Количество() = 1 Тогда
		ВидБрокерскогоОтчета = Перечисления.ВидыБрокерскогоОтчета.Получить(0);
		ИмяЛиста = "broker_rep";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбора = ДополнительныеПараметры.ДиалогВыбора;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлу = ДиалогВыбора.ПолноеИмяФайла;
		РасширениеФайла = Сред(ПутьКФайлу, СтрНайти(ПутьКФайлу, ".", НаправлениеПоиска.СКонца)+1);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	ЛогЗагрузки = "";
	
	КоличествоСтрок = 0;
	ТабЗнач = ЗагрузитьМетодом_MSADODB(ПутьКФайлу, ИмяЛиста, , , , КоличествоСтрок, "MicrosoftACEOLEDB12");
	
	Если ВидБрокерскогоОтчета = Перечисления.ВидыБрокерскогоОтчета.ТинькоффPantini Тогда
		ОбработатьТинькоффPantini(ТабЗнач);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Метод "Microsoft ADODB"/
//
// Параметры:
//  ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//  ИмяЛиста - Имя выбранного листа файла EXCEL.
//  СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//            Не используется, т.к. в СтрокеСоединения указано HDR=YES, а не HDR=NO.
//       В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//  НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//  КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//  КолвоСтрокExcel - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//  ПодключениеADODB - тип драйвера ADODB для подключения к EXCEL.
//
// Возвращаемые значения:
//  ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
Функция ЗагрузитьМетодом_MSADODB(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, 
 Знач ПодключениеADODB = "MicrosoftJetOLEDB40") Экспорт
    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
    
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
    Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
    
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
    Попытка
        ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
        
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
            
            Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 2 Тогда
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
    КонецЦикла;
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
	//НоваяСтрока = ТаблицаРезультат.Добавить();
	//НоваяСтрока.НомерСтроки = 1;
	//Для ит = 1 ПО КолвоКолонокExcel Цикл
	//    
	//    ИмяКолонки = "К_" + ит;
	//    Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
	//    НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
	//    
	//КонецЦикла;
    
    // ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    НомерСтроки = 1;
    Пока ADODBRecordset.EOF() = 0 Цикл
        
        НомерСтроки = НомерСтроки + 1;
        
        Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            ADODBRecordset.MoveNext();             // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаРезультат.Добавить();
        НоваяСтрока.НомерСтроки = НомерСтроки;
        
        Для ит = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(ит - 1);
                
            Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = Поле.Value;        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
            
            ИмяКолонки = "К_" + ит;
            НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
            
            // Используется при формировании таблицы на форме обработки.
            ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
            ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
            ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
        КонецЦикла;
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    ADODBRecordset.Close();
    ADODBConnection.Close();
    ADODBRecordset   = Неопределено;
    ADODBConnection = Неопределено;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

&НаСервере
Процедура ОбработатьТинькоффPantini(ТабЗнач)
	
	ТаблицаСделок = ПолучитьТаблицуСделок();
	
	СоответствиеКолонок = Новый Соответствие;
	Для Каждого Колонка Из ТабЗнач.Колонки Цикл
		СоответствиеКолонок.Вставить(Колонка.Заголовок, Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Стр Из ТабЗнач Цикл
		
		Если Не Стр[СоответствиеКолонок.Получить("status")] = "done" Тогда
			Продолжить;
		КонецЕсли;
		
		ТипСделки = Перечисления.ТипыСделок.ПустаяСсылка();
		
		Если Стр[СоответствиеКолонок.Получить("operationType")] = "Sell" Тогда
			ТипСделки = Перечисления.ТипыСделок.Продажа;
		ИначеЕсли Стр[СоответствиеКолонок.Получить("operationType")] = "Buy" Тогда
			ТипСделки = Перечисления.ТипыСделок.Покупка;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТипСделки) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСделки = Стр[СоответствиеКолонок.Получить("payment")];
		Если СуммаСделки < 0 Тогда
			СуммаСделки = -СуммаСделки;
		КонецЕсли;
		
		СуммаКомиссии = Стр[СоответствиеКолонок.Получить("commission")];
		Если ТипЗнч(СуммаКомиссии) <> Тип("Число") Тогда
			СуммаКомиссии = 0;
		КонецЕсли;
		СуммаКомиссии = -СуммаКомиссии;
		
		ДатаВремяСделки = ОпределитьДатуВремяСделки(Стр[СоответствиеКолонок.Получить("date")]);
		
		Валюта = ОпределитьВалюту(Стр[СоответствиеКолонок.Получить("currency")]);
		Тикер = Стр[СоответствиеКолонок.Получить("ticker")];
		ТипИнструмента = ПолучитьТипИнструмента(Стр[СоответствиеКолонок.Получить("instrumentType")]);
		Название = Стр[СоответствиеКолонок.Получить("showName")];
		
		НовСтр = ТаблицаСделок.Добавить();
		НовСтр.ИдентификаторСделки = Формат(Стр[СоответствиеКолонок.Получить("id")], "ЧГ=0");
		НовСтр.ДатаДень = НачалоДня(ДатаВремяСделки - 2*60*60); // сделки до двух часов ночи относятся к сессии предыдущего дня
		НовСтр.ДатаВремяСделки = ДатаВремяСделки;
		НовСтр.ЦеннаяБумага = ОпределитьЦеннуюБумагу(Тикер, Название, ТипИнструмента, Валюта);
		НовСтр.Валюта = Валюта;
		НовСтр.ТипСделки = ТипСделки;
		НовСтр.Количество = Стр[СоответствиеКолонок.Получить("quantity")];
		НовСтр.Цена = Стр[СоответствиеКолонок.Получить("price")];
		НовСтр.Сумма = СуммаСделки;
		НовСтр.Комиссия = СуммаКомиссии;
		НовСтр.Описание = Стр[СоответствиеКолонок.Получить("description")];
		
	КонецЦикла;	
	
	ТаблицаСделок.Сортировать("ДатаВремяСделки");
	СоздатьОбновитьДокументыСделкиЗаДень(ТаблицаСделок);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСделок()
	
	ТаблицаСделок = Новый ТаблицаЗначений;
	ТаблицаСделок.Колонки.Добавить("ДатаДень");
	ТаблицаСделок.Колонки.Добавить("ИдентификаторСделки");
	ТаблицаСделок.Колонки.Добавить("ДатаВремяСделки");
	ТаблицаСделок.Колонки.Добавить("ЦеннаяБумага");
	ТаблицаСделок.Колонки.Добавить("Валюта");
	ТаблицаСделок.Колонки.Добавить("ТипСделки");
	ТаблицаСделок.Колонки.Добавить("Количество");
	ТаблицаСделок.Колонки.Добавить("Цена");
	ТаблицаСделок.Колонки.Добавить("Сумма");
	ТаблицаСделок.Колонки.Добавить("Комиссия");
	ТаблицаСделок.Колонки.Добавить("Описание");
	
	Возврат ТаблицаСделок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьДатуВремяСделки(СтрокаДатаВремя)
	
	// образец строки СтрокаДатаВремя - "2021-01-08T21:06:06.728+03:00"
	Год = Лев(СтрокаДатаВремя, 4);
	Месяц = Сред(СтрокаДатаВремя, 6, 2);
	День = Сред(СтрокаДатаВремя, 9, 2);
	Часы = Сред(СтрокаДатаВремя, 12, 2);
	Минуты = Сред(СтрокаДатаВремя, 15, 2);
	Секунды = Сред(СтрокаДатаВремя, 18, 2);
	ДатаВремяСделки = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
	Возврат ДатаВремяСделки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьВалюту(СтрокаВалюта)
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(СтрокаВалюта));
	Если Валюта.Пустая() Тогда
		НоваяВалюта = Справочники.Валюты.СоздатьЭлемент();
		НоваяВалюта.Наименование = СтрокаВалюта;
		НоваяВалюта.Записать();
		Валюта = НоваяВалюта.Ссылка;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипИнструмента(СтрокаТипИнструмента)
	
	ТипИнструмента = Перечисления.ТипыИнструментов.ПустаяСсылка();
	
	Если СтрокаТипИнструмента = "Stock" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Акция;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "ETF" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.ETF;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "Bond" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Облигация;
	КонецЕсли;	
	
	Если СтрокаТипИнструмента = "FX" тогда
		ТипИнструмента = Перечисления.ТипыИнструментов.Валюта;
	КонецЕсли;	
	
	Возврат ТипИнструмента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьЦеннуюБумагу(Тикер, Название, ТипИнструмента, Валюта)
	
	ЦеннаяБумага = Справочники.ЦенныеБумаги.НайтиПоНаименованию(СокрЛП(Тикер), Истина);
	Если ЦеннаяБумага.Пустая() Тогда
		НоваяЦеннаяБумага = Справочники.ЦенныеБумаги.СоздатьЭлемент();
		НоваяЦеннаяБумага.Наименование = Тикер;
		НоваяЦеннаяБумага.ПолноеНаименование = Название;
		НоваяЦеннаяБумага.ТипИнструмента = ТипИнструмента;
		НоваяЦеннаяБумага.ОсновнаяВалюта = Валюта;
		НоваяЦеннаяБумага.Записать();
		ЦеннаяБумага = НоваяЦеннаяБумага.Ссылка;
	КонецЕсли;
	
	Возврат ЦеннаяБумага;
	
КонецФункции

&НаСервере
Функция СоздатьОбновитьДокументыСделкиЗаДень(ТаблицаСделок)
	
	ДниСделок = ТаблицаСделок.Скопировать();
	ДниСделок.Свернуть("ДатаДень");
	
	Для Каждого СтрДень Из ДниСделок Цикл
		
		НайденныйДокумент = НайтиДокументСделкиЗаДень(СтрДень.ДатаДень, БрокерскийСчет);
		Если НайденныйДокумент.Пустая() Тогда
			НовыйДокумент = Документы.СделкиЗаДень.СоздатьДокумент();
			НовыйДокумент.Дата = СтрДень.ДатаДень;
			НовыйДокумент.БрокерскийСчет = БрокерскийСчет;
			НовыйДокумент.Записать();
			НайденныйДокумент = НовыйДокумент.Ссылка;
			ЛогЗагрузки = ЛогЗагрузки + "Создан документ ""Сделки за день"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		Иначе
			ЛогЗагрузки = ЛогЗагрузки + "Обновлен документ ""Сделки за день"" за " + Формат(СтрДень.ДатаДень, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		
		СделкиЗаДень = ТаблицаСделок.Скопировать(Новый Структура("ДатаДень", СтрДень.ДатаДень));
		
		ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
		ДокОбъект.Сделки.Загрузить(СделкиЗаДень);
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ПодготовитьВнутридневныеСделки(СделкиЗаДень, СтрДень.ДатаДень, БрокерскийСчет);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЛогЗагрузки) Тогда
		Элементы.ЛогЗагрузки.Видимость = Истина;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиДокументСделкиЗаДень(ДатаДень, БрокерскийСчет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СделкиЗаДень.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СделкиЗаДень КАК СделкиЗаДень
	|ГДЕ
	|	НЕ СделкиЗаДень.ПометкаУдаления
	|	И СделкиЗаДень.БрокерскийСчет = &БрокерскийСчет
	|	И СделкиЗаДень.Дата МЕЖДУ &ДатаНачалаДня И &ДатаКонцаДня");
	
	Запрос.УстановитьПараметр("БрокерскийСчет", БрокерскийСчет);
	Запрос.УстановитьПараметр("ДатаНачалаДня", НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаКонцаДня", КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СделкиЗаДень.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДокументВнутридневныеСделки(ДатаДень, БрокерскийСчет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнутридневныеДанныеБрокерскогоОтчета.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВнутридневныеДанныеБрокерскогоОтчета КАК ВнутридневныеДанныеБрокерскогоОтчета
	|ГДЕ
	|	НЕ ВнутридневныеДанныеБрокерскогоОтчета.ПометкаУдаления
	|	И ВнутридневныеДанныеБрокерскогоОтчета.БрокерскийСчет = &БрокерскийСчет
	|	И ВнутридневныеДанныеБрокерскогоОтчета.Дата МЕЖДУ &ДатаНачалаДня И &ДатаКонцаДня");
	
	Запрос.УстановитьПараметр("БрокерскийСчет", БрокерскийСчет);
	Запрос.УстановитьПараметр("ДатаНачалаДня", НачалоДня(ДатаДень));
	Запрос.УстановитьПараметр("ДатаКонцаДня", КонецДня(ДатаДень));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Документы.СделкиЗаДень.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодготовитьВнутридневныеСделки(СделкиЗаДень, ДатаДень, БрокерскийСчет)
	
	НайденныйДокумент = НайтиДокументВнутридневныеСделки(ДатаДень, БрокерскийСчет);
	Если НайденныйДокумент.Пустая() Тогда
		НовыйДокумент = Документы.ВнутридневныеДанныеБрокерскогоОтчета.СоздатьДокумент();
		НовыйДокумент.Дата = ДатаДень;
		НовыйДокумент.БрокерскийСчет = БрокерскийСчет;
		НовыйДокумент.Записать();
		НайденныйДокумент = НовыйДокумент.Ссылка;
	КонецЕсли;	
	
	ИмеющиесяСтроки = НайденныйДокумент.ДневныеДанные.Выгрузить();
	
	ТаблицаВнутридневныхСделок = Новый ТаблицаЗначений;
	ТаблицаВнутридневныхСделок.Колонки.Добавить("ЦеннаяБумага");
	ТаблицаВнутридневныхСделок.Колонки.Добавить("Валюта");
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаПокупки", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаПродажи", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("СуммаКомиссий", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("ФинансовыйРезультат", Новый ОписаниеТипов("Число"));
	ТаблицаВнутридневныхСделок.Колонки.Добавить("Комментарий");
	
	ТекущиеСделки = ТаблицаВнутридневныхСделок.Скопировать();
	ТекущиеСделки.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого Стр Из СделкиЗаДень Цикл
		
		СтруктураПоиска = Новый Структура("ЦеннаяБумага, Валюта", Стр.ЦеннаяБумага, Стр.Валюта);
		МассивНайдСтрок = ТекущиеСделки.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			НайдСтрока = ТекущиеСделки.Добавить();
			НайдСтрока.ЦеннаяБумага = Стр.ЦеннаяБумага;
			НайдСтрока.Валюта = Стр.Валюта;
		Иначе
			НайдСтрока = МассивНайдСтрок[0];
		КонецЕсли;	
		Если Стр.ТипСделки = Перечисления.ТипыСделок.Покупка Тогда
			НайдСтрока.Количество = НайдСтрока.Количество + Стр.Количество;
			НайдСтрока.СуммаПокупки = НайдСтрока.СуммаПокупки + Стр.Сумма;
		ИначеЕсли Стр.ТипСделки = Перечисления.ТипыСделок.Продажа Тогда
			НайдСтрока.Количество = НайдСтрока.Количество - Стр.Количество;
			НайдСтрока.СуммаПродажи = НайдСтрока.СуммаПродажи + Стр.Сумма;	
		КонецЕсли;
		НайдСтрока.СуммаКомиссий = НайдСтрока.СуммаКомиссий + Стр.Комиссия;
		
		Если НайдСтрока.Количество = 0 Тогда
			
			НовСтрока = ТаблицаВнутридневныхСделок.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, НайдСтрока);
			НовСтрока.ФинансовыйРезультат = НовСтрока.СуммаПродажи - НовСтрока.СуммаПокупки - НовСтрока.СуммаКомиссий;
			
			СтруктураПоиска = Новый Структура("ЦеннаяБумага, Валюта, СуммаПокупки, СуммаПродажи");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, НовСтрока);
			МассивИмеющихсяСтрок = ИмеющиесяСтроки.НайтиСтроки(СтруктураПоиска);
			Если МассивИмеющихсяСтрок.Количество() > 0 Тогда
				НовСтрока.Комментарий = МассивИмеющихсяСтрок[0].Комментарий;
			КонецЕсли;	
			
			ТекущиеСделки.Удалить(НайдСтрока);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ДокОбъект = НайденныйДокумент.ПолучитьОбъект();
	ДокОбъект.ДневныеДанные.Загрузить(ТаблицаВнутридневныхСделок);
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры	

#КонецОбласти