///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
    Описание.Имя = "ДневникТрейдера";
    Описание.Версия = "1.0.1.3";
    
    // Требуется библиотека стандартных подсистем.
    Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
    
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДТ.ПерейтиНаВерсию_1_0_1_1";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы() Экспорт
    
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
        Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
    
КонецПроцедуры
	
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
    
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
    
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
    
КонецПроцедуры

Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПерейтиНаВерсию_1_0_1_1() Экспорт
	
	// создание элемента справочника "Брокерские счета"
	Выборка = Справочники.БрокерскиеСчета.Выбрать();
	Если Не Выборка.Следующий() Тогда
		СправочникОбъект = Справочники.БрокерскиеСчета.СоздатьЭлемент();
		СправочникОбъект.Наименование = "Основной";
		ЗаписатьСправочникОбъект(СправочникОбъект);
	КонецЕсли;	
	
	// создание валют
	ВалютаРубль = НайтиСоздатьВалюту(
		"643", 
		НСтр("ru = 'RUB'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		НСтр("ru = 'Российский рубль'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		"рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	ВалютаДоллар = НайтиСоздатьВалюту(
		"840", 
		НСтр("ru = 'USD'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		НСтр("ru = 'Доллар США'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		"доллар, доллара, долларов, м, цент, цента, центов, м, 2 знака",
		Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета);
	ВалютаЕвро = НайтиСоздатьВалюту(
		"978", 
		НСтр("ru = 'EUR'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		НСтр("ru = 'Евро'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
		"евро, евро, евро, м, цент, цента, центов, м, 2 знака",
		Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета);
	
КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  СправочникСсылка.Валюты - Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, СпособУстановкиКурса = Неопределено) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи          = ПараметрыПрописиНаРусском;
		Если СпособУстановкиКурса <> Неопределено Тогда
			СправочникОбъект.СпособУстановкиКурса  = СпособУстановкиКурса;
		КонецЕсли;	
		
		ЗаписатьСправочникОбъект(СправочникОбъект);
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;
	
	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.* - объект, который требуется записать.
//	Сообщать - Булево - Признак необходимости вывода сообщений.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru = 'Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru = 'Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru = '<без кода>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

#КонецОбласти
